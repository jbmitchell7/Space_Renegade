class MyButton(Button):
#class used to get uniform button styles
    def __init__(self, **kwargs):
        super(MyButton, self).__init__(**kwargs)
        self.font_size = Window.width*0.018

class SmartMenu(Widget):
#the instance created by this class will appear
#when the game is started for the first time
    buttonList = []
 
    def __init__(self, **kwargs):
    #create custom events first
        self.register_event_type('on_button_release') #creating a custom event called 'on_button_release' that will be used to pass information from the menu to the parent instance

        super(SmartMenu, self).__init__(**kwargs)
        self.layout = BoxLayout(orientation = 'vertical')
        self.layout.width = Window.width/2
        self.layout.height = Window.height/2
        self.layout.x = Window.width/2 - self.layout.width/2
        self.layout.y = Window.height/2 - self.layout.height/2
        self.add_widget(self.layout)

def on_button_release(self, *args):
    #print 'The on_button_release event was just dispatched', args
    #don't need to do anything here. needed for dispatch
    pass

def callback(self,instance):
#print('The button %s is being pressed' % instance.text)
    self.buttonText = instance.text
    self.dispatch('on_button_release') #dispatching the callback event 'on_button_release' to tell teh parent instance to read the button text

def addButtons(self):
    for k in self.buttonList:
        tmpBtn = MyButton(text = k)
        tmpBtn.background_color = [.4, .4, .4, .4]
        tmpBtn.bind(on_release = self.callback) #when the button is released the callback function is called
        self.layout.add_widget(tmpBtn)

def buildUp(self):
#self.colorWindow()
    self.addButtons()


    class SmartStartMenu(SmartMenu):
    #setup the menu button names
        buttonList = ['start', 'about']

        def __init__(self, **kwargs):
            super(SmartStartMenu, self).__init__(**kwargs)
           self.layout = BoxLayout(orientation = 'vertical')
           self.layout.width = Window.width/2
           self.layout.height = Window.height/2
           self.layout.x = Window.width/2 - self.layout.width/2
           self.layout.y = Window.height/2 - self.layout.height/2
           self.add_widget(self.layout)

           self.msg = Label(text = 'Flappy Ship')
           self.msg.font_size = Window.width*0.07
           self.msg.pos = (Window.width*0.45,Window.height*0.75)
           self.add_widget(self.msg)
           self.img = Image(source = 'lens2.png')
           self.img.size = (Window.width*1.5,Window.height*1.5)
           self.img.pos = (-Window.width*0.2,-Window.height*0.2)
           self.img.opacity = 0.35
           self.add_widget(self.img)

    class WidgetDrawer(Widget):
    #This widget is used to draw all of the objects on the screen
    #it handles the following:
    # widget movement, size, positioning
        def __init__(self, imageStr, **kwargs):
           super(WidgetDrawer, self).__init__(**kwargs)

           with self.canvas:

               self.size = (Window.width*.002*25,Window.width*.002*25)
               self.rect_bg=Rectangle(source=imageStr,pos=self.pos,size = self.size)

               self.bind(pos=self.update_graphics_pos)
               self.x = self.center_x
               self.y = self.center_y
               self.pos = (self.x,self.y)
               self.rect_bg.pos = self.pos

        def update_graphics_pos(self, instance, value):
            self.rect_bg.pos = value

        def setSize(self,width, height):
           self.size = (width, height)

        def setPos(xpos,ypos):
           self.x = xpos
           self.y = ypos
